{
  "$schema": "http://json.schemastore.org/template",
  "author": "MintPlayer",
  "classifications": [ "Single sign-on" ],
  "identity": "MintPlayer.AspNetCore.IdentityServer.Templates.Application.CSharp",
  "groupIdentity": "MintPlayer.AspNetCore.IdentityServer.Application",
  "shortName": "id-application",
  "name": "IdentityServer Application",
  "description": "ASP.NET Core Identity Application",
  "sourceName": "MintPlayer.AspNetCore.IdentityServer.Application",
  "defaultName": "WebApplication1",
  "tags": {
    "language": "C#",
    "type": "project"
  },
  "symbols": {
    "UseNgBootstrap": {
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "true",
      "displayName": "Use ng-bootstrap",
      "description": "Adds the node package @mintplayer/ng-bootstrap to the angular project"
    },
    "UseHttpsRedirection": {
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "true",
      "displayName": "Use HTTPS redirection",
      "description": "Configures the app to redirect all requests to HTTPS"
    },
    "UseHsts": {
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "true",
      "displayName": "Configure for HSTS",
      "description": "The app returns a Strict-Transport-Security response header to the client on each request"
    },
    "UseHtmlMinification": {
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "true",
      "displayName": "Use HTML minification",
      "description": "Use WebMarkupMin to minify the generated HTML"
    },
    "ServerSideRenderingType": {
      "type": "parameter",
      "datatype": "choice",
      "displayName": "Server-side rendering type",
      "description": "Use Angular SSR to render the requested pages through NodeJS on the server. Choose whether you want to use angular hydration where webrequests are sent during SSR, or OnSupplyData where data is passed from .NET to angular",
      "defaultValue": "hydration",
      "choices": [{
        "choice": "none",
        "displayName": "None",
        "description": "Don't setup server-side rendering"
      }, {
        "choice": "hydration",
        "displayName": "Hydration (side-by-side hosted)",
        "description": "The angular app is hosted independently and uses hydration with request caching"
      }, {
        "choice": "onSupplyData",
        "displayName": "OnSupplyData (hosted)",
        "description": "The angular app is hosted through the ASP.NET Core app. No requests are sent during SSR"
      }]
    },
    "SsrNone": {
      "type": "computed",
      "value": "(ServerSideRenderingType == \"none\")"
    },
    "SsrHydration": {
      "type": "computed",
      "value": "(ServerSideRenderingType == \"hydration\")"
    },
    "SsrOnSupplyData": {
      "type": "computed",
      "value": "(ServerSideRenderingType == \"onSupplyData\")"
    },
    "SetupTranslations": {
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "false",
      "displayName": "Setup translations",
      "description": "Configures the angular project to use @ngx-translate"
    },
    "UsePwa": {
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "true",
      "displayName": "Make this app a PWA",
      "description": "Progressive Web Apps offer the possibility to install the application on the device"
    },
    "UseXsrfProtection": {
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "true",
      "displayName": "Use XSRF protection",
      "description": "Adds code in both the ASP.NET Core and angular app to prevent XSRF attacks"
    },
    "TwoFactorAuthentication": {
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "false",
      "displayName": "Use 2-factor authentication",
      "description": "Adds code in both the ASP.NET Core and angular app to implement 2FA"
    },
    "ConfigureIdentityProvider": {
      "type": "parameter",
      "datatype": "choice",
      "choices": [{
        "choice": "none",
        "displayName": "None",
        "description": "Don't setup an identity provider"
      }, {
        "choice": "identityserver",
        "displayName": "IdentityServer",
        "description": "Add Duende.IdentityServer as identity provider"
      }],
      "defaultValue": "none",
      "displayName": "Setup an identity provider",
      "description": "Do you want to allow other websites to use your website to login into their site?"
    },
    "ExternalLogins": {
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "false",
      "displayName": "External logins",
      "description": "Adds code in both the ASP.NET Core and angular app for other identity providers (Microsoft, Google, X, ...)"
    },
    "EmailConfirmation": {
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "false",
      "displayName": "Email confirmation",
      "description": "Adds code to block new accounts until they clicked a link that was sent through email"
    },
    "ConcurrencyHandling": {
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "false",
      "displayName": "Concurrency handling",
      "description": "Adds code to ensure that an item cannot be overwritten by someone while someone else is working on it"
    },
    "SearchProvider": {
      "type": "parameter",
      "datatype": "choice",
      "choices": [{
        "choice": "none",
        "displayName": "None",
        "description": "No search provider"
      }, {
        "choice": "elasticsearch",
        "displayName": "ElasticSearch",
        "description": "Configures ElasticSearch in your application"
      }],
      "defaultValue": "none",
      "displayName": "Search provider",
      "description": "Choose whether you want to have a search engine set up"
    },
    "Docker": {
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "false",
      "displayName": "Add Docker support",
      "description": "Adds configuration files to run your application in Docker"
    },
    "OpenSearch": {
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "false",
      "displayName": "OpenSearch",
      "description": "Adds tab-to-search functionality to your application"
    }
  },
  "sources": [
    {
      "source": "./",
      "target": "./",
      "exclude": [
        ".template.config/**",
        "Web/ClientApp/package.json.in"
      ],
      "modifiers": [
        {
          "condition": "(ServerSideRenderingType === 'none')",
          "exclude": [
            "Web/ClientApp/src/app/app.server.module.ts",
            "Web/ClientApp/src/main.server.ts",
            "Web/ClientApp/server.ts",
            "Web/ClientApp/tsconfig.server.json",
            "Web/Services/SpaPrerenderingService.cs",
            "Web/ClientApp/src/app/pages/information/weatherforecasts/weatherforecasts.component.ssr.ts",
            "Web/ClientApp/src/app/providers/data-from-server.ts"
          ]
        },
        {
          "condition": "(ServerSideRenderingType !== 'none')",
          "exclude": [
            "Web/ClientApp/src/app/pages/information/weatherforecasts/weatherforecasts.component.ts",
            "Web/ClientApp/src/app/guards/is-logged-in/is-logged-in.guard.ts"
          ],
          "rename": {
            "Web/ClientApp/src/app/pages/information/weatherforecasts/weatherforecasts.component.ssr.ts": "Web/ClientApp/src/app/pages/information/weatherforecasts/weatherforecasts.component.ts",
            "Web/ClientApp/src/app/guards/is-logged-in/is-logged-in.guard.ssr.ts": "Web/ClientApp/src/app/guards/is-logged-in/is-logged-in.guard.ts"
          }
        },
        {
          "condition": "(!UsePwa)",
          "exclude": [
            "Web/ClientApp/ngsw-config.json",
            "Web/ClientApp/src/manifest.webmanifest",
            "Web/ClientApp/src/assets/icons"
          ]
        }
      ]
    }
  ]
}