{
  "$schema": "http://json.schemastore.org/template",
  "author": "MintPlayer",
  "classifications": [ "Single sign-on" ],
  "identity": "MintPlayer.AspNetCore.IdentityServer.Templates.Application.CSharp",
  "groupIdentity": "MintPlayer.AspNetCore.IdentityServer.Application",
  "shortName": "id-application",
  "name": "IdentityServer Application",
  "description": "ASP.NET Core Identity Application",
  "sourceName": "MintPlayer.AspNetCore.IdentityServer.Application",
  "defaultName": "WebApplication1",
  "tags": {
    "language": "C#",
    "type": "project"
  },
  "symbols": {
    "UseServerSideRendering": {
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "false",
      "displayName": "Use server-side rendering",
      "description": "Use Angular Universal to render the requested pages through NodeJS on the server"
    },
    "Testje": {
      "type": "parameter",
      "isEnabled": "!(UseServerSideRendering)",
      "datatype": "bool",
      "description": "This parameter should disappear if \"Use server-side rendering\" is checked"
    },
    "UseHtmlMinification": {
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "true",
      "displayName": "Use HTML minification",
      "description": "Use WebMarkupMin to minify the generated HTML"
    },
    "UsePwa": {
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "true",
      "displayName": "Make this app a PWA",
      "description": "Progressive Web Apps offer the possibility to install the application on the device"
    },
    "UseXsrfProtection": {
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "true",
      "displayName": "Use XSRF protection",
      "description": "Adds code in both the ASP.NET Core and angular app to prevent XSRF attacks"
    }
  },
  "sources": [
    {
      "source": "./",
      "target": "./",
      "exclude": [
        ".template.config/**",
        "Web/ClientApp/package.json.in"
      ],
      "modifiers": [
        {
          "condition": "(!UseServerSideRendering)",
          "exclude": [
            "Web/ClientApp/src/app/app.server.module.ts",
            "Web/ClientApp/src/main.server.ts",
            "Web/ClientApp/server.ts",
            "Web/ClientApp/tsconfig.server.json",
            "Web/Services/SpaPrerenderingService.cs",
            "Web/ClientApp/src/app/pages/information/weatherforecasts/weatherforecasts.component.ssr.ts",
            "Web/ClientApp/src/app/providers/data-from-server.ts"
          ]
        },
        {
          "condition": "(UseServerSideRendering)",
          "exclude": [
            "Web/ClientApp/src/app/pages/information/weatherforecasts/weatherforecasts.component.ts",
            "Web/ClientApp/src/app/guards/is-logged-in/is-logged-in.guard.ts"
          ],
          "rename": {
            "Web/ClientApp/src/app/pages/information/weatherforecasts/weatherforecasts.component.ssr.ts": "Web/ClientApp/src/app/pages/information/weatherforecasts/weatherforecasts.component.ts",
            "Web/ClientApp/src/app/guards/is-logged-in/is-logged-in.guard.ssr.ts": "Web/ClientApp/src/app/guards/is-logged-in/is-logged-in.guard.ts"
          }
        },
        {
          "condition": "(!UsePwa)",
          "exclude": [
            "Web/ClientApp/ngsw-config.json",
            "Web/ClientApp/src/manifest.webmanifest",
            "Web/ClientApp/src/assets/icons"
          ]
        }
      ]
    }
  ]
}